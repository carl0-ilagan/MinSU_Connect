rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         request.auth.token.email.matches('.*@minsu\\.edu\\.ph'));
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParticipant(userId) {
      return isAuthenticated() && (
        request.auth.uid in resource.data.users ||
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.receiverId
      );
    }

    function areFriends(userId1, userId2) {
      let friendship = get(/databases/$(database)/documents/friendships/$(userId1 + "_" + userId2)).data;
      return friendship != null && friendship.status == "accepted";
    }

    function isReactionOrCommentUpdate() {
      // Allow updating reactions, likedBy, likes, commentList, comments, shares, shareList, lastCommentAt, and repostedBy
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly([
        "reactions", "likedBy", "likes", "commentList", "comments", "shares", "shareList", "lastCommentAt", "repostedBy", "repostCount"
      ]);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Posts collection
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if (
        isOwner(resource.data.userId) || 
        isAdmin() ||
        (isAuthenticated() && isReactionOrCommentUpdate())
      );
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Friend requests collection
    match /friendRequests/{requestId} {
      allow read: if true;  // Allow read during logout
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId || 
        request.auth.uid == resource.data.receiverId
      );
    }

    // Friendships collection
    match /friendships/{friendshipId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid in resource.data.users);
      allow delete: if isAuthenticated() && 
        (request.auth.uid in resource.data.users);
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.participants;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Reports collection
    match /reports/{reportId} {
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }

    // Moderation logs collection
    match /moderationLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update, delete: if false;
    }

    // Feedback collection
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (resource.data.userId == request.auth.uid && 
         resource.data.status != "Reviewed" && 
         request.resource.data.userId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        (resource.data.userId == request.auth.uid && 
         resource.data.status != "Reviewed")
      );
    }

    // Allow list operations for all users
    match /{document=**} {
      allow list: if true;  // Allow list during logout
    }
  }
} 